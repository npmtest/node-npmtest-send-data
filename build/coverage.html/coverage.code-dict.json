{"/home/travis/build/npmtest/node-npmtest-send-data/test.js":"/* istanbul instrument in package npmtest_send_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-send-data/lib.npmtest_send_data.js":"/* istanbul instrument in package npmtest_send_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_send_data = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_send_data = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-send-data/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-send-data && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_send_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_send_data\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_send_data.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_send_data.rollup.js'] =\n            local.assetsDict['/assets.npmtest_send_data.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_send_data.__dirname + '/lib.npmtest_send_data.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/index.js":"'use strict';\n\nvar Buffer = require('buffer').Buffer\nvar zlib = require('zlib')\n\nvar CALLBACK_REQUIRED = 'send(req, res, opts, callback). Callback is required'\nvar isGzip = /\\bgzip\\b/\n\nmodule.exports = send\n\nfunction send(req, res, opts, callback) {\n    var headers = opts.headers || {}\n    var statusCode = opts.statusCode || null\n    var body = typeof opts === 'object' ? opts.body : opts\n    var gzip = opts.gzip || false\n\n    body = Buffer.isBuffer(body) ? body : new Buffer(body || '')\n    headers = headers || {}\n\n    res.statusCode = statusCode || res.statusCode\n\n    Object.keys(headers).forEach(function (header) {\n        res.setHeader(header, headers[header])\n    })\n\n    if (gzip && acceptsGzip(req)) {\n        if (!callback) {\n            throw new Error(CALLBACK_REQUIRED)\n        }\n\n        zlib.gzip(body, function (err, body) {\n            if (err) {\n                return callback(err)\n            }\n\n            res.once('finish', callback)\n\n            res.setHeader('content-encoding', 'gzip')\n            res.setHeader('content-length', body.length)\n            res.end(body)\n        })\n    } else {\n        if (callback) {\n            res.once('finish', callback)\n        }\n\n        res.setHeader('content-length', body.length)\n        res.end(body)\n    }\n}\n\nfunction acceptsGzip(req) {\n    var acceptEncoding = req.headers['accept-encoding'] || ''\n\n    return !!acceptEncoding.match(isGzip)\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/css.js":"'use strict';\n\nvar extend = require('xtend');\n\nvar send = require('./index')\n\nvar CONTENT_TYPE_HEADER = {\n    'content-type': 'text/css'\n};\n\nmodule.exports = sendCss\n\nfunction sendCss(req, res, opts, callback) {\n    if (typeof opts === 'string' || Buffer.isBuffer(opts)) {\n        opts = { body: opts }\n    } else {\n        opts = extend(opts);\n    }\n\n    opts.headers = extend(opts.headers, CONTENT_TYPE_HEADER);\n\n    send(req, res, opts, callback)\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/error.js":"'use strict';\n\nvar url = require('url');\nvar assert = require('assert');\nvar STATUS_CODES = require('http').STATUS_CODES;\n\nvar sendJson = require('./json.js');\n\nmodule.exports = sendError;\n\nfunction sendError(req, res, opts, callback) {\n    assert(opts && opts.body, 'opts.body is required');\n\n    var err = opts.body;\n    var logger = opts.logger;\n    var statsd = opts.statsd;\n    var verbose = opts.verbose;\n\n    var errOpts = {\n        verbose: typeof verbose === 'boolean' ? verbose : true,\n        serializeStack: opts.serializeStack,\n        bodyStatusCode: opts.bodyStatusCode,\n        additionalParams: opts.additionalParams,\n        err: err\n    };\n\n    var statsPrefix = opts.statsPrefix || 'clients.send-data';\n    var parsedUrl = url.parse(req.url);\n    var statsdKey = statsPrefix + '.error-handler';\n\n    var isExpected = err.expected ||\n        (err.statusCode >= 400 && err.statusCode <= 499);\n\n    if (!isExpected) {\n        if (logger) {\n            logger.error('unexpected error', err);\n        }\n        if (statsd) {\n            statsd.increment(statsdKey + '.unexpected');\n        }\n    } else if (statsd) {\n        statsd.increment(statsdKey + '.expected');\n    }\n    writeError(req, res, errOpts, callback);\n}\n\nfunction writeError(req, res, opts, callback) {\n    var err = opts.err;\n    var statusCode = err.statusCode || 500;\n    var body = {\n        message: err.message || STATUS_CODES[statusCode] ||\n            STATUS_CODES[500]\n    };\n\n    if (typeof err.type === 'string') {\n        body.type = err.type;\n    }\n\n    if (Array.isArray(err.messages)) {\n        body.messages = err.messages;\n    }\n\n    // Toggle sending status code in the body\n    if (opts.bodyStatusCode !== false) {\n        body.statusCode = statusCode;\n    }\n\n    if (opts.verbose) {\n        body.expected = err.expected;\n        body.debug = err.debug;\n    }\n\n    if (opts.serializeStack) {\n        body.stack = err.stack;\n    }\n\n    // Append additional params\n    if (opts.additionalParams) {\n        opts.additionalParams.forEach(function appendKey(k) {\n            body[k] = err[k];\n        });\n    }\n\n    sendJson(req, res, {\n        statusCode: statusCode,\n        body: body\n    }, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/json.js":"'use strict';\n\n// var stringify = require('json-stringify-safe')\n\nvar extend = require('xtend');\n\nvar send = require('./index')\nvar isSendObject = require('./is-send-object')\n\nvar CONTENT_TYPE_HEADER = {\n    'content-type': 'application/json'\n}\n\nmodule.exports = sendJson\n\nfunction sendJson(req, res, opts, callback) {\n    if (!isSendObject(opts)) {\n        opts = { body: opts }\n    } else {\n        opts = extend(opts);\n    }\n\n    if (opts.pretty) {\n        opts.space = '    '\n    }\n\n    var tuple = safeStringify(opts.body,\n        opts.replacer || null, opts.space || '');\n\n    if (tuple[0]) {\n        return callback(tuple[0]);\n    }\n\n    opts.headers = extend(opts.headers, CONTENT_TYPE_HEADER);\n    opts.body = tuple[1];\n\n    send(req, res, opts, callback)\n}\n\nfunction safeStringify(obj, replace, space) {\n    var json;\n    var error = null;\n\n    try {\n        json = JSON.stringify(obj, replace, space);\n    } catch (e) {\n        error = e;\n    }\n\n    return [error, json];\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/is-send-object.js":"'use strict';\n\nmodule.exports = isSendObject\n\nfunction isSendObject(object) {\n    return object &&\n        (typeof object.statusCode === 'number' ||\n        (typeof object.headers === 'object' && object.headers !== null));\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/html.js":"'use strict';\n\nvar Buffer = require('buffer').Buffer;\nvar extend = require('xtend');\n\nvar send = require('./index')\n\nvar CONTENT_TYPE_HEADER = {\n    'content-type': 'text/html'\n};\n\nmodule.exports = sendHtml\n\nfunction sendHtml(req, res, opts, callback) {\n    if (typeof opts === 'string' || Buffer.isBuffer(opts)) {\n        opts = { body: opts }\n    } else {\n        opts = extend(opts);\n    }\n\n    opts.headers = extend(opts.headers, CONTENT_TYPE_HEADER);\n\n    send(req, res, opts, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/javascript.js":"'use strict';\n\nvar extend = require('xtend');\n\nvar send = require(\"./index\")\n\nmodule.exports = sendJavascript\n\nvar CONTENT_TYPE_HEADER = {\n    \"content-type\": \"text/javascript\"\n}\n\nfunction sendJavascript(req, res, opts, callback) {\n    if (typeof opts === \"string\" || Buffer.isBuffer(opts)) {\n        opts = { body: opts }\n    } else {\n        opts = extend(opts);\n    }\n\n    opts.headers = extend(opts.headers, CONTENT_TYPE_HEADER);\n\n    send(req, res, opts, callback)\n}\n","/home/travis/build/npmtest/node-npmtest-send-data/node_modules/send-data/plain.js":"'use strict';\n\nvar extend = require('xtend');\n\nvar send = require('./index')\n\nvar CONTENT_TYPE_HEADER = {\n    'content-type': 'text/plain; charset=utf-8'\n}\n\nmodule.exports = sendPlain\n\nfunction sendPlain(req, res, opts, callback) {\n    if (typeof opts === 'string' || Buffer.isBuffer(opts)) {\n        opts = { body: opts }\n    } else {\n        opts = extend(opts);\n    }\n\n    opts.headers = extend(opts.headers, CONTENT_TYPE_HEADER);\n\n    send(req, res, opts, callback)\n}\n"}